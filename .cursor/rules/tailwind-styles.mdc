---
globs: "*.tsx,*.jsx,*.css"
description: "Tailwind CSS 样式编写规范，包括类名使用、内联样式、响应式设计"
---

# Tailwind CSS 样式编写规范

## 基础原则

### 优先使用 Tailwind 类名

- 基础样式使用 Tailwind CSS 类名
- 复杂定制使用内联样式便于管理
- 响应式设计优先

```typescript
// ✅ 推荐：Tailwind + 内联定制
<div 
  className="bg-gray-100 dark:bg-gray-800 rounded-lg p-4 transition-colors"
  style={{ 
    boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
    backdropFilter: 'blur(8px)'
  }}
>
  <CodeEditor />
</div>

// ❌ 避免：单独的 CSS 文件
// styles.css
// .custom-container { ... }
```

## 主题支持规范

### CSS 变量 + Tailwind 组合

- 使用 CSS 变量定义主题色彩
- 结合 Tailwind 类名实现主题切换

```css
/* ✅ 推荐：CSS 变量 + Tailwind */
:root {
  --color-primary: #3b82f6;
  --color-bg-code: #f8fafc;
}

[data-theme="dark"] {
  --color-primary: #60a5fa;
  --color-bg-code: #1e293b;
}
```

```typescript
// ✅ 推荐：在组件中使用
<div className="bg-[var(--color-bg-code)] text-[var(--color-primary)]">
  <span className="text-gray-600 dark:text-gray-300">
    内容区域
  </span>
</div>
```

## 响应式设计规范

### 移动端优先

- 默认样式适配移动端
- 使用断点修饰符适配更大屏幕

```typescript
// ✅ 推荐：移动端优先的响应式设计
<div className="
  w-full p-4                    // 移动端：全宽，内边距4
  md:w-1/2 md:p-6              // 平板：半宽，内边距6
  lg:w-1/3 lg:p-8              // 桌面：1/3宽，内边距8
  xl:w-1/4                     // 大屏：1/4宽
">
  <Content />
</div>
```

### 标准断点使用

- `sm`: 640px (小屏幕)
- `md`: 768px (平板)  
- `lg`: 1024px (桌面)
- `xl`: 1280px (大屏)
- `2xl`: 1536px (超大屏)

## 组件样式组织

### 样式复用策略

- 使用 `clsx` 或 `cn` 函数组合类名
- 提取常用样式组合为变量

```typescript
// ✅ 推荐：样式组合函数
import { clsx } from 'clsx'

const buttonStyles = {
  base: "px-4 py-2 rounded-lg font-medium transition-colors",
  variants: {
    primary: "bg-blue-500 text-white hover:bg-blue-600",
    secondary: "bg-gray-200 text-gray-900 hover:bg-gray-300",
    danger: "bg-red-500 text-white hover:bg-red-600"
  },
  sizes: {
    sm: "px-3 py-1 text-sm",
    md: "px-4 py-2 text-base", 
    lg: "px-6 py-3 text-lg"
  }
}

const Button = ({ variant = 'primary', size = 'md', className, ...props }) => (
  <button 
    className={clsx(
      buttonStyles.base,
      buttonStyles.variants[variant],
      buttonStyles.sizes[size],
      className
    )}
    {...props}
  />
)
```

## 性能优化

### 避免样式冲突

- 不要混用 Tailwind 和传统 CSS
- 使用 `!important` 修饰符时要谨慎

```typescript
// ✅ 推荐：清晰的样式优先级
<div className="text-blue-500 hover:text-blue-600">
  普通状态
</div>

<div className="text-blue-500 !text-red-500">
  强制覆盖（谨慎使用）
</div>

// ❌ 避免：样式冲突
<div className="text-blue-500 text-red-500">
  // 产生冲突，结果不可预测
</div>
```

### 条件样式应用

- 使用条件逻辑动态应用样式
- 避免内联三元运算符过于复杂

```typescript
// ✅ 推荐：清晰的条件样式
const getStatusStyles = (status: string) => {
  const baseStyles = "px-3 py-1 rounded-full text-sm font-medium"
  
  switch (status) {
    case 'success':
      return `${baseStyles} bg-green-100 text-green-800`
    case 'error':
      return `${baseStyles} bg-red-100 text-red-800`
    case 'warning':
      return `${baseStyles} bg-yellow-100 text-yellow-800`
    default:
      return `${baseStyles} bg-gray-100 text-gray-800`
  }
}

// ❌ 避免：复杂的内联条件
<div className={`px-3 py-1 ${status === 'success' ? 'bg-green-100 text-green-800' : status === 'error' ? 'bg-red-100 text-red-800' : 'bg-gray-100'}`}>
```

## 深色模式支持

### 统一的深色模式策略

- 所有组件必须支持深色模式
- 使用 `dark:` 修饰符

```typescript
// ✅ 推荐：完整的深色模式支持
<div className="
  bg-white dark:bg-gray-900 
  text-gray-900 dark:text-gray-100
  border border-gray-200 dark:border-gray-700
  shadow-sm dark:shadow-gray-900/20
">
  <h2 className="text-xl font-bold text-gray-900 dark:text-white">
    标题
  </h2>
  <p className="text-gray-600 dark:text-gray-400">
    描述文本
  </p>
</div>
```
